// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int      @id @default(autoincrement()) //공식문서에 @-- 에 관한 설명이 나와있다.
  phone     String?  @unique
  email     String?  @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
  products  Product[]
  posts     Post[]
  answers   Answer[]
  wonderings Wondering[]
  writtenReviews Review[] @relation(name: "writtenReviews")
  receivedReviews Review[] @relation(name: "receivedReviews")
  fav       Fav[]
  sales Sale[]
  purchases Purchase[]
  record Record[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //위에 있는 model 이름과 같은 User를 써주고 자동완성 기능을 이용해 입력하면 된다. 자동완성 안될경우 User까지 써우고 npx prisma format 해주면 뒤에 완성된다.
  //onDelete: Cascade 에서 Cascade는 prisma studio에서 유저값이 삭제되면 토큰도 같이 삭제되게 하는 기능이다. 수정후 npx prisma db push를 해줘야 한다.
  userId    Int // user 와 userId가 있는 이유는 db에 실제 user 전체 데이터가 들어가지 않기 떄문이다.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id Int  @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  image     String
  name      String
  price     Int
  description String @db.MediumText //db.MediumText 최대 16777215글자 ,text 최대65535글자, tinyText 최대 255글자,longText 최대 4292967295글자
  favs Fav[]
  sales Sale[]
  purchases Purchase[]
  records Record[]
}

model Fav {
  id Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float? //필수로 하지 않는 이유는 주소를 알리고 싶지 않은 사람들을 위한 옵션
  longitude Float?
  answers   Answer[]
  wondering Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review String @db.MediumText
  createdBy User @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdFor User @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
}

model Sale {
  id Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Record {
  id Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  kind Kind
  updatedAt DateTime @updatedAt
}

enum Kind {
  Purchase
  Sale
  Fav
}